(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-page-scroll-core'), require('@angular/router'), require('@angular/common'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-page-scroll', ['exports', '@angular/core', 'ngx-page-scroll-core', '@angular/router', '@angular/common', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ngx-page-scroll'] = {}, global.ng.core, global['ngx-page-scroll-core'], global.ng.router, global.ng.common, global.rxjs.operators));
}(this, (function (exports, core, ngxPageScrollCore, router, common, operators) { 'use strict';

    /* tslint:disable:no-host-metadata-property directive-selector */
    var NgxPageScrollDirective = /** @class */ (function () {
        function NgxPageScrollDirective(pageScrollService, router, document) {
            this.pageScrollService = pageScrollService;
            this.router = router;
            this.pageScrollAdjustHash = false;
            this.pageScrollFinish = new core.EventEmitter();
            this.document = document;
        }
        NgxPageScrollDirective.prototype.ngOnChanges = function (changes) {
            // Some inputs changed, reset the pageScrollInstance
            this.pageScrollInstance = undefined;
        };
        NgxPageScrollDirective.prototype.ngOnDestroy = function () {
            if (this.pageScrollInstance) {
                this.pageScrollService.stop(this.pageScrollInstance);
            }
        };
        NgxPageScrollDirective.prototype.getPageScrollTarget = function () {
            return this.pageScrollTarget || this.href || (this.fragment ? '#' + this.fragment : '');
        };
        NgxPageScrollDirective.prototype.generatePageScrollInstance = function () {
            if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {
                var options = {
                    document: this.document,
                    scrollTarget: this.getPageScrollTarget(),
                };
                if (this.pageScroll) {
                    options.namespace = this.pageScroll;
                }
                if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {
                    options.verticalScrolling = !this.pageScrollHorizontal;
                }
                if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {
                    options.scrollOffset = this.pageScrollOffset;
                }
                if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {
                    options.interruptible = this.pageScrollInterruptible;
                }
                if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {
                    options.scrollInView = this.pageScrollInView;
                }
                if (this.pageScrollEasing) {
                    options.easingLogic = this.pageScrollEasing;
                }
                if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {
                    options.duration = this.pageScrollDuration;
                }
                if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {
                    options.speed = this.pageScrollSpeed;
                }
                if (this.pageScrollFinish) {
                    options.scrollFinishListener = this.pageScrollFinish;
                }
                this.pageScrollInstance = this.pageScrollService.create(options);
            }
            return this.pageScrollInstance;
        };
        NgxPageScrollDirective.prototype.pushRouterState = function () {
            if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'
                && this.pageScrollInstance.pageScrollOptions.scrollTarget.substr(0, 1) === '#') {
                // "Navigate" to the current route again and this time set the fragment/hash
                this.router.navigate([], {
                    fragment: this.pageScrollInstance.pageScrollOptions.scrollTarget.substr(1),
                    queryParamsHandling: 'preserve',
                });
            }
        };
        NgxPageScrollDirective.prototype.scroll = function () {
            var pageScrollInstance = this.generatePageScrollInstance();
            this.pushRouterState();
            this.pageScrollService.start(pageScrollInstance);
        };
        NgxPageScrollDirective.prototype.handleClick = function (clickEvent) {
            var _this = this;
            if (this.routerLink && this.router !== null && this.router !== undefined) {
                var urlTree = void 0;
                if (typeof this.routerLink === 'string') {
                    urlTree = this.router.parseUrl(this.routerLink);
                }
                else {
                    urlTree = this.router.createUrlTree(this.routerLink);
                }
                if (!this.router.isActive(urlTree, true)) {
                    // We need to navigate their first.
                    // Navigation is handled by the routerLink directive so we only need to listen for route change
                    this.router.events.pipe(operators.filter(function (routerEvent) {
                        // We're only interested in successful navigations or when the navigation fails
                        return routerEvent instanceof router.NavigationEnd || routerEvent instanceof router.NavigationError
                            || routerEvent instanceof router.NavigationCancel;
                    }), 
                    // Consume only one event, automatically "unsubscribing" from the event stream afterwards
                    operators.take(1)).subscribe(function (routerEvent) {
                        if (routerEvent instanceof router.NavigationEnd) {
                            // use a timeout to start scrolling as soon as the stack is cleared
                            setTimeout(function () {
                                _this.scroll();
                            }, 0);
                        }
                    });
                    return false; // to preventDefault()
                }
            }
            this.scroll();
            return false; // to preventDefault()
        };
        return NgxPageScrollDirective;
    }());
    NgxPageScrollDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[pageScroll]',
                    host: {
                        '(click)': 'handleClick($event)',
                    },
                },] }
    ];
    NgxPageScrollDirective.ctorParameters = function () { return [
        { type: ngxPageScrollCore.PageScrollService },
        { type: router.Router, decorators: [{ type: core.Optional }] },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    NgxPageScrollDirective.propDecorators = {
        routerLink: [{ type: core.Input }],
        href: [{ type: core.Input }],
        fragment: [{ type: core.Input }],
        pageScrollTarget: [{ type: core.Input }],
        pageScrollHorizontal: [{ type: core.Input }],
        pageScrollOffset: [{ type: core.Input }],
        pageScrollDuration: [{ type: core.Input }],
        pageScrollSpeed: [{ type: core.Input }],
        pageScrollEasing: [{ type: core.Input }],
        pageScrollInterruptible: [{ type: core.Input }],
        pageScrollInView: [{ type: core.Input }],
        pageScrollAdjustHash: [{ type: core.Input }],
        pageScroll: [{ type: core.Input }],
        pageScrollFinish: [{ type: core.Output }]
    };

    var NgxPageScrollModule = /** @class */ (function () {
        function NgxPageScrollModule() {
        }
        return NgxPageScrollModule;
    }());
    NgxPageScrollModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        NgxPageScrollDirective,
                    ],
                    imports: [
                        ngxPageScrollCore.NgxPageScrollCoreModule,
                    ],
                    exports: [
                        NgxPageScrollDirective,
                    ],
                },] }
    ];

    /*
     * Public API Surface of ngx-page-scroll
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxPageScrollDirective = NgxPageScrollDirective;
    exports.NgxPageScrollModule = NgxPageScrollModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-page-scroll.umd.js.map
